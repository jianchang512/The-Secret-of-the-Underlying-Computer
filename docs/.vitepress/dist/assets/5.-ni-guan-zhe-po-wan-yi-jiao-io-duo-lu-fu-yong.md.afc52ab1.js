import{_ as e,o as s,c as p,Q as a}from"./chunks/framework.bf97371d.js";const l="/assets/5_1.9879f43e.jpg",n="/assets/5_2.8845b99f.jpg",o="/assets/5_3.9500e9d8.jpg",t="/assets/5_4.5d371e83.jpg",i="/assets/5_5.e6f0ca54.jpg",c="/assets/5_6.f04e56d6.jpg",r="/assets/5_7.03c5a2cd.jpg",d="/assets/5_8.596e0afe.jpg",u="/assets/5_9.5fc9e559.jpg",h="/assets/5_10.5076a449.jpg",q=JSON.parse('{"title":"5.你管这破玩意叫IO多路复用？","description":"","frontmatter":{},"headers":[],"relativePath":"5.-ni-guan-zhe-po-wan-yi-jiao-io-duo-lu-fu-yong.md","filePath":"5.-ni-guan-zhe-po-wan-yi-jiao-io-duo-lu-fu-yong.md"}'),g={name:"5.-ni-guan-zhe-po-wan-yi-jiao-io-duo-lu-fu-yong.md"},_=a('<h1 id="_5-你管这破玩意叫io多路复用" tabindex="-1">5.你管这破玩意叫IO多路复用？ <a class="header-anchor" href="#_5-你管这破玩意叫io多路复用" aria-label="Permalink to &quot;5.你管这破玩意叫IO多路复用？&quot;">​</a></h1><h3 id="什么是文件" tabindex="-1">什么是文件 <a class="header-anchor" href="#什么是文件" aria-label="Permalink to &quot;什么是文件&quot;">​</a></h3><p>程序员使用I/O最终都逃不过文件。 </p><p>因为这篇同属于高性能、高并发系列，讲到高性能、高并发就离不开Linux/Unix，因此这里就来讨论一下Linux世界中的文件。 </p><p>实际上对于程序员来说文件是一个很简单的概念，我们只需要将其理解为一个N byte的序列就可以了： </p><p><mark style="background-color:blue;">b1, b2, b3, b4, ....... bN</mark></p><p>实际上所有的I/O设备都被抽象为了文件这个概念，<strong>一切皆文件</strong>，Everything isFile，磁盘、网络数据、终端，甚至进程间通信工具管道pipe等都被当做文件对待。</p><p><img src="'+l+'" alt=""></p><p>所有的I/O操作也都是通过文件读写来实现的，<strong>这一非常优雅的抽象可以让程序员使用一套接口就能实现所有I/O操作</strong>。 </p><p>常用的I/O操作接口一般有以下几类：</p><ul><li>打开文件，open</li><li>改变读写位置，seek</li><li>文件读写，read、write</li><li>关闭文件，close</li></ul><p>程序员通过这几个接口几乎可以实现所有I/O操作，这就是文件这个概念的强大之处。</p><h3 id="文件描述符" tabindex="-1">文件描述符 <a class="header-anchor" href="#文件描述符" aria-label="Permalink to &quot;文件描述符&quot;">​</a></h3><p>在本篇第二节I/O过程中我们讲到，要想读取比如磁盘数据我们需要指定一个buff用来装入数据，是这样用的：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">read(buff);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">read(buff);</span></span></code></pre></div><p>但是这里我们忽略了一个问题，那就是虽然我们执行了往哪里写数据，但是我们该从哪里读数据呢？ 从上一节中我们知道，通过文件这个概念我们能实现几乎所有I/O操作，<strong>因此这里少的一个主角就是文件</strong>。 </p><p>那么我们一般都怎么使用文件呢？</p><p><img src="'+n+'" alt=""></p><p>如果你周末去比较火的餐厅吃饭应该会有体会，一般周末这样的餐厅都会排队，然后服务员会给你一个排队序号，通过这个序号服务员就能找到你，这里的好处就是服务员无需记住你是谁、你的名字是什么、是不是保护环境爱好小动物等等，这里的关键点就是<strong>服务员对你一无所知，但是依然可以通过一个号码就能找到你</strong>。 </p><p>同样的，在Linux世界使用文件，我们也需要借助一个号码，根据“弄不懂原则”，这个号码就被称为了文件描述符file descriptors，在Linux世界中鼎鼎大名，其道理和上面那个排队号码一样。 </p><p>因此，文件描述仅仅就是一个数字而已，但是通过这个数字我们可以操作一个打开的文件，这一点要记住。</p><p><img src="'+o+`" alt=""></p><p>有了文件描述符，进程对文件一无所知，比如文件在磁盘的什么位置上、内存是如何管理文件的等等，这些信息属于操作系统，进程无需关心，操作系统只需要给进程一个文件描述符就足够了。 </p><p>因此我们来完善上述程序：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">int fd = open(file_name);</span></span>
<span class="line"><span style="color:#e1e4e8;">read(fd, buff);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">int fd = open(file_name);</span></span>
<span class="line"><span style="color:#24292e;">read(fd, buff);</span></span></code></pre></div><p>怎么样，是不是非常简单。</p><h3 id="文件描述符太多了怎么办" tabindex="-1">文件描述符太多了怎么办 <a class="header-anchor" href="#文件描述符太多了怎么办" aria-label="Permalink to &quot;文件描述符太多了怎么办&quot;">​</a></h3><p>经过了这么多的铺垫，终于到高性能、高并发这一主题了。 </p><p>从前几节我们知道，所有I/O操作都可以通过文件样的概念来进行，这当然包括网络通信。 </p><p>如果你是一个web服务器，当三次握手成功以后，我们通过调用accept同样会得到一个文件描述符，只不过这个文件描述符是用来进行网络通信的，通过读写该文件描述符你就可以同客户端通信。在这里为了概念上好理解，我们称之为链接描述符，通过这个描述符我们就可以读写客户端的数据了。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">int conn_fd = accept(...);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">int conn_fd = accept(...);</span></span></code></pre></div><p>server的处理逻辑通常是读取客户端请求数据，然后执行某些特定逻辑：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">if(read(conn_fd, request_buff) &gt; 0) {</span></span>
<span class="line"><span style="color:#e1e4e8;">   do_something(request_buff);</span></span>
<span class="line"><span style="color:#e1e4e8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">if(read(conn_fd, request_buff) &gt; 0) {</span></span>
<span class="line"><span style="color:#24292e;">   do_something(request_buff);</span></span>
<span class="line"><span style="color:#24292e;">}</span></span></code></pre></div><p>是不是非常简单，然而世界终归是复杂的，也不是这么简单的。 </p><p>接下来就是比较复杂的了。</p><p><img src="`+t+`" alt=""></p><p>既然我们的主题是高并发，那么server端就不可能只和一个客户端通信，而是成千上万个客户端。这时你需要处理不再是一个描述符这么简单，而是有可能要处理成千上万个描述符。 </p><p>为了不让问题一上来就过于复杂，我们先简单化，假设只同时处理两个客户端的请求。 </p><p>有的同学可能会说，这还不简单，这样写不就行了：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">if(read(socket_fd1, buff) &gt; 0) { // 处理第一个</span></span>
<span class="line"><span style="color:#e1e4e8;">   do_something();</span></span>
<span class="line"><span style="color:#e1e4e8;">}</span></span>
<span class="line"><span style="color:#e1e4e8;">if(read(socket_fd2, buff) &gt; 0) {</span></span>
<span class="line"><span style="color:#e1e4e8;">   do_something();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">if(read(socket_fd1, buff) &gt; 0) { // 处理第一个</span></span>
<span class="line"><span style="color:#24292e;">   do_something();</span></span>
<span class="line"><span style="color:#24292e;">}</span></span>
<span class="line"><span style="color:#24292e;">if(read(socket_fd2, buff) &gt; 0) {</span></span>
<span class="line"><span style="color:#24292e;">   do_something();</span></span></code></pre></div><p>在本篇第二节中我们讨论过这是非常典型的阻塞式I/O，如果读取第一个请求进程被阻塞而暂停运行，那么这时我们就无法处理第二个请求了，即使第二个请求的数据已经就位，这也就意味着所有其它客户端必须等待，而且通常情况下也不会只有两个客户端而是成千上万个，上万个连接也要这样串行处理吗。 </p><p>聪明的你一定会想到使用多线程，为每个请求开启一个线程，这样一个线程被阻塞不会影响到其它线程了，注意，既然是高并发，那么我们要为成千上万个请求开启成千上万个线程吗，大量创建销毁线 程会严重影响系统性能。 </p><p>那么这个问题该怎么解决呢？ </p><p><strong>这里的关键点在于在进行I/O时，我们并不知道该文件描述对于的I/O设备是否是可读的、是否是可写的</strong>，在外设的不可读或不可写的状态下进行I/O只会导致进程阻塞被暂停运行。 </p><p>因此要优雅的解决这个问题，就要从其它角度来思考这个问题了。</p><p><img src="`+i+'" alt=""></p><h3 id="不要打电话给我-有需要我会打给你" tabindex="-1">不要打电话给我，有需要我会打给你 <a class="header-anchor" href="#不要打电话给我-有需要我会打给你" aria-label="Permalink to &quot;不要打电话给我，有需要我会打给你&quot;">​</a></h3><p>大家生活中肯定会接到过推销电话，而且不止一个，一天下来接上十个八个推销电话你的身体会被掏空的。 </p><p>这个场景的关键点在于打电话的人并不知道你是不是要买东西，只能来一遍遍问你，因此一种更好的策略是不要让他们打电话给你，记下他们的电话，有需要的话打给他们。 </p><p>也就是不要打电话给我，有需要我会打给你。 </p><p>在这个例子中，你，就好比内核，推销者就好比应用程序，电话号码就好比文件描述符，和你用电话沟通就好比I/O。 </p><p>现在你应该明白了吧，处理多个文件描述符的更好方法其实就存在于推销电话中。 </p><p>因此相比上一节中我们通过I/O接口主动问内核这些文件描述符对应的外设是不是已经就绪了，一种更好的方法是，我们把这些内核一股脑扔给内核，并霸气的告诉内核：“我这里有1万个文件描述符，你替我监视着它们，有可以读写的文件描述符时你就告诉我，我好处理”。而不是弱弱的问内核：“第一个文件描述可以读写了吗？第二个文件描述符可以读写吗？第三个文件描述符可以读写了吗？” </p><p>这样应用程序就从“繁忙”的主动变为清闲的被动了，反正哪些设备ok了内核会通知我， 能偷懒我才不要那么勤奋。</p><p><img src="'+c+'" alt=""></p><p>这是一种不同的处理I/O的机制，同样需要起一个名字，再次祭出“弄不懂原则”，就叫I/O多路复用吧，这就是 I/O multiplexing。</p><h3 id="i-o多路复用-i-o-multiplexing" tabindex="-1">I/O多路复用，I/O multiplexing <a class="header-anchor" href="#i-o多路复用-i-o-multiplexing" aria-label="Permalink to &quot;I/O多路复用，I/O multiplexing&quot;">​</a></h3><p>multiplexing一词其实多用于通信领域，为了充分利用通信线路，希望在一个信道中传输多路信号，要想在一个信道中传输多路信号就需要把这多路信号结合为一路，将多路信号组合成一个信号的设备被称为multiplexer，显然接收方接收到这一路组合后的信号后要恢复原先的多路信号，这个设备被称为demultiplexer，如图所示：</p><p><img src="'+r+'" alt=""></p><p>回到我们的主题。 </p><p>所谓I/O多路复用指的是这样一个过程：</p><ol><li>我们拿到了一堆文件描述符(不管是网络相关的、还是磁盘文件相关等等，任何文件描述符都可以) </li><li>通过调用<strong>某个函数</strong>告诉内核：“<strong>这个函数你先不要返回，你替我监视着这些描述符，当这堆文件描述符中有可以进行I/O读写操作的时候你再返回</strong>”</li><li>当调用的这个函数返回后我们就能知道哪些文件描述符可以进行I/O操作了。</li></ol><p>那么有哪些函数可以用来进行I/O多路复用呢？ </p><p>在Linux世界中有这样三种机制可以用来进行I/O多路复用：</p><ul><li>select</li><li>poll</li><li>epoll</li></ul><p>接下来我们就简单介绍一下牛掰的I/O多路复用三剑客。</p><p><img src="'+d+'" alt=""></p><h3 id="i-o多路复用三剑客" tabindex="-1">I/O多路复用三剑客 <a class="header-anchor" href="#i-o多路复用三剑客" aria-label="Permalink to &quot;I/O多路复用三剑客&quot;">​</a></h3><p>本质上select、poll、epoll都是阻塞式I/O，也就是我们常说的同步I/O。</p><h4 id="select-初出茅庐" tabindex="-1">select：初出茅庐 <a class="header-anchor" href="#select-初出茅庐" aria-label="Permalink to &quot;select：初出茅庐&quot;">​</a></h4><p>在select这种I/O多路复用机制下，我们需要把想监控的文件描述集合通过函数参数的形式告诉select，然后select会将这些文件描述符集合拷贝到内核中，我们知道数据拷贝是有性能损耗的，因此为了减少这种数据拷贝带来的性能损耗，Linux内核对集合的大小做了限制，并规定用户监控的文件描述集合不能超过1024个，同时当select返回后我们仅仅能知道有些文件描述符可以读写了，但是我们不知道是哪一个，因此程序员必须再遍历一边找到具体是哪个文件描述符可以读写了。 </p><p>因此，总结下来select有这样几个特点：</p><ul><li>我能照看的文件描述符数量有限，不能超过1024个</li><li>用户给我的文件描述符需要拷贝的内核中</li><li>我只能告诉你有文件描述符满足要求了，但是我不知道是哪个，你自己一个一个去找吧(遍历)</li></ul><p>因此我们可以看到，select机制的特性在高性能网络服务器动辄几万几十万并发链接的场景下无疑是低效的。</p><p><img src="'+u+'" alt=""></p><h4 id="poll-小有所成" tabindex="-1">poll：小有所成 <a class="header-anchor" href="#poll-小有所成" aria-label="Permalink to &quot;poll：小有所成&quot;">​</a></h4><p>poll和select是非常相似的，poll相对于select的优化仅仅在于解决了文件描述符不能超过1024个的限制，select和poll都会随着监控的文件描述增加而出现性能下降，因此不适合高并发场景。</p><h4 id="epoll-独步天下" tabindex="-1">epoll：独步天下 <a class="header-anchor" href="#epoll-独步天下" aria-label="Permalink to &quot;epoll：独步天下&quot;">​</a></h4><p>在select面临的三个问题中，文件描述数量限制已经在poll中解决了，剩下的两个问题呢？ </p><p>针对第一个epoll使用的策略是<strong>各个击破</strong>与<strong>共享内存</strong>。</p><p>实际上文件描述符集合变化的频率比较低，select和poll频繁的拷贝整个集合，内核都快要烦死了，epoll通过引入epoll_ctl很体贴的做到了只操作那些有变化的文件描述符，同时epoll和内核还成为了好朋友，共享了同一块内存，这块内存中保存的就是那些已经可读或者可写的的文件描述符集合，这样就减少了内核和程序的内存拷贝开销。 </p><p>针对第二点，epoll使用的策略是“当小弟”。 </p><p>在select和poll机制下，进程要亲自下场去各个文件描述符上等待，任何一个文件描述可读或者可写就唤醒进程，但是进程被唤醒后也是一脸懵逼并不知道到底是哪个文件描述符可读或可写，还要再从头到尾检查一遍。 </p><p>但epoll就懂事多了，主动找到进程要当小弟替大哥出头。</p><p><img src="'+h+'" alt=""></p><p>在这种机制下，进程不需要亲自下场了，进程只要等待在epoll上，epoll代替进程去各个文件描述符 上等待，当哪个文件描述符可读或者可写的时候就告诉epoll，epoll用小本本认真记录下来然后唤醒大哥：“进程大哥，快醒醒，你要处理的文件描述符我都记下来了”，这样进程被唤醒后就无需自己从 头到尾检查一遍，因为epoll都已经记下来了。 </p><p>因此我们可以看到，在这种机制下，实际上利用的就是“不要打电话给我，有需要我会打给你”，这就 不需要一遍一遍像孙子一样问各个文件描述符了，而是翻身做主人当大爷了，“你们那个文件描述符 可读或者可写了主动报上来”，这中机制实际上就是大名鼎鼎的事件驱动，event-driven，这也是我们 下一篇的主题。 </p><p>实际上在Linux平台，<strong>epoll基本上就是高并发的代名词</strong>。 </p><p>限于篇幅，关于epoll的详细使用方法就不在这里讲解了。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>基于一切皆文件的设计哲学，I/O也可以通过文件的形式实现，显然高并发要与多个文件交互，这就离不开高效的I/O多路复用技术，本文我们详细讲解了什么是I/O多路复用以及使用方法，这其中以epoll为代表的I/O多路复用(基于事件驱动)技术使用非常广泛，实际上你会发现但凡涉及到高并发、高性能都能见到事件驱动的编程方法，这也是下一篇的主题，敬请期待。</p>',91),f=[_];function b(m,y,I,k,O,v){return s(),p("div",null,f)}const P=e(g,[["render",b]]);export{q as __pageData,P as default};
