import{_ as a,o as e,c as o,Q as i}from"./chunks/framework.bf97371d.js";const g=JSON.parse('{"title":"34.为什么抽象在计算机科学中如此重要？","description":"","frontmatter":{},"headers":[],"relativePath":"34.-wei-shi-mo-chou-xiang-zai-ji-suan-ji-ke-xue-zhong-ru-ci-zhong-yao.md","filePath":"34.-wei-shi-mo-chou-xiang-zai-ji-suan-ji-ke-xue-zhong-ru-ci-zhong-yao.md"}'),n={name:"34.-wei-shi-mo-chou-xiang-zai-ji-suan-ji-ke-xue-zhong-ru-ci-zhong-yao.md"},t=i('<h1 id="_34-为什么抽象在计算机科学中如此重要" tabindex="-1">34.为什么抽象在计算机科学中如此重要？ <a class="header-anchor" href="#_34-为什么抽象在计算机科学中如此重要" aria-label="Permalink to &quot;34.为什么抽象在计算机科学中如此重要？&quot;">​</a></h1><p>All problems in computer science can be solved by another level of indirection.</p><h2 id="没有抽象的世界" tabindex="-1">没有抽象的世界 <a class="header-anchor" href="#没有抽象的世界" aria-label="Permalink to &quot;没有抽象的世界&quot;">​</a></h2><p>想象这样一种场景，如果我们的语言中没有代词这种形式，那么我们想表达“张三是个好人“该怎么说呢？可能是这样的： </p><p>”你还记得我说过的人吧，穿着邋邋遢遢的，公司在中关村，整天背着个双肩包，写代码的，天天996，这个人是个好人“，看到了吧，在没有代词的情况下我们想表达一件事是非常困难的，因为我们需要<strong>具体的描述清楚所有细节</strong>，但是有了”张三“这种抽象后，一切都简单了，我们只需要<strong>针对张三这种抽象进行交流</strong>，再也不需要针对一堆细节进行交流了，抽象大大增强了表现力，这就是抽象的力量。 </p><p>接下来回到计算机世界。</p><h2 id="计算机使用层面" tabindex="-1">计算机使用层面 <a class="header-anchor" href="#计算机使用层面" aria-label="Permalink to &quot;计算机使用层面&amp;#x20;&quot;">​</a></h2><p>我们在使用计算机时其实抽象就在发挥作用，在Word中编辑文档时我们不会去考虑CPU是如何处理这些字符的，这些字符是如何被保存到磁盘的。在浏览网页时我们不需要关心网页中的数据是如何在网络中传输的、浏览器是怎样把这些数据适当的渲染出来的，我们需要做的仅仅就是在Word中简单的输入字符，用鼠标或者手指滑动网页。 </p><p>因此只要在使用计算机，那么抽象就在发挥作用，只不过是我们没有意识到而已，而之所以我们没有意识到是因为抽象工作的太好了。 </p><h2 id="编程语言层面" tabindex="-1">编程语言层面 <a class="header-anchor" href="#编程语言层面" aria-label="Permalink to &quot;编程语言层面&amp;#x20;&quot;">​</a></h2><p>程序员也可以从抽象中获得极大好处，因为软件是复杂的，但程序员可以通过抽象来控制复杂度，方法就是抽象。 </p><p>比如一个好的设计就是对某项功能抽象出一组简单的API，这样其它程序员在使用这个模块时只需要关注这几个简单的API而不是一堆内部实现细节。 </p><p>不同的编程语言提供了不同的机制来让程序员实现这种抽象。 </p><p>比如面向对象语言(OOP)的一大优势就是让程序员方便进行抽象，这样类的使用者就无需关心类的实现了，更不用提OOP中的多态、抽象类等，有了这些程序员可以只<strong>针对抽象而不是具体实现进行编程</strong>，这样的程序会有更好的可扩展性，也能更好的应对需求的变化。 </p><h2 id="系统设计层面" tabindex="-1">系统设计层面 <a class="header-anchor" href="#系统设计层面" aria-label="Permalink to &quot;系统设计层面&quot;">​</a></h2><p>计算机从本质上将就是在抽象的基础上建立起来的。<strong>计算机科学中的一大主题其实就是在不同层面提供抽象表示从而对外屏蔽实现细节</strong>。</p><p>对于CPU来说，其对外提供的是一堆指令集，程序员只需要使用这些指令就可以指挥CPU工作了，这样就无需从细节上知道CPU是如何取出指令、执行指令的。 </p><p>在操作系统层面，我们将I/O设备抽象成了文件、把程序的运行抽象成了进程、把程序运行时占用的内存抽象成了虚拟内存、又把进程和进程运行以来的环境抽象成了容器、最后把所有的一切包括操作系统、进程、CPU、内存、磁盘、网络抽象成了虚拟机。现在虚拟机技术是云计算的基石，实际上这种技术在上世纪60年代就出现了，并在当前火热的云计算中大放异彩。 </p><p>难怪计算机科学中有一句名言，“计算机科学中没有什么是不能通过增加一层抽象解决的”，当然后面还有半句，“除了存在太多抽象层这个问题”。 </p><p>总结 </p><p>抽象的目的其实就是通过移除不必要的信息从而减少复杂度，因此抽象可以让我们更加关注重点。 </p><p>在这里没有用太多编程语言中的示例来讲解，其实这也是一种抽象，那就是学习编程也好其它领域也罢，最好理解“顶层原理”，这个是通用的。个人一直有这样一种观点，那就是学计算机不是学一堆语言语法，那不过就是一些文法规则的实现细节罢了，编程高手之所以是高手不在于比别人有多了解一门编程语言有什么用法，最重要的还是这所说的“顶层原理”，那么顶层原理在哪里呢？就存在于我们常说的基础中：操作系统、编译原理、网络、数据结构算法等。</p>',22),r=[t];function p(h,s,c,l,d,u){return e(),o("div",null,r)}const m=a(n,[["render",p]]);export{g as __pageData,m as default};
